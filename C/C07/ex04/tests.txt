# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    tests.txt                                          :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jgermany <jgermany@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/11/10 22:42:03 by jgermany          #+#    #+#              #
#    Updated: 2022/11/22 19:55:53 by jgermany         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

C07X04 🟢🔴

Evil tests made with 😈😈😈 passion

Context : Create ft_strjoin(char *nbr, char *base_from, char *base_to), a
function that converts a number in a base base_from to a base base_to.

nbr follows the same rules as atoi base. 


What kind of tests should we do here?
	-> See below

	Base case (positive and negatives, both directions)
		"9" "0123456789" "01"
			-> '1001'
		"1001" "01" "0123456789"
			-> '9'
		"d0" "0dkD1" "jUs5i3u"
			-> '3' 
			
	Extreme cases (int_min, int_max, underflow, overflows)
		"" "" ""
			->

	Too much polarity (excess of +++ or --- | Does multiple - change sign ?)
		"" "" ""

	Ambivalence (mix of + or - | Does multiple - change sign ?)
		"" "" ""

	Adding a new glyph: what happens when a number can't be written with only 
	character.
		"" "" ""

	Wrong bases
		"" "" ""

	No nbr should start like this (only number, sign, or white)
		"" "" ""

	After a whitespace, another whitespace, a sign, a number (HOT CASE 🌶️)
		"" "" ""
		
	After a sign, a sign or a number, no whistespace or anything else
		"" "" ""

	Any illegal character should break number parsing
		"" "" ""

	printf("RES: %s\n", ft_convert_base(" ---2147483650XOXOXOX_kawaiisugi:)", 
		"0123456789", "0123456789"));
	printf("RES: %s\n", ft_convert_base(" --- vn  OH MY GOD^^", 
	"poneyvifetsympa", "0123456789"));
	printf("RES: %s\n", ft_convert_base(" ---21474:)", 
		"0123456789", "0123456789"));
	printf("RES: %s\n", ft_convert_base(" --42edfrc", 
		"0123456789", "01"));
	printf("RES: %s\n", ft_convert_base(" ---101010uwuwu^^",
		"01", "0123456789"));
	printf("RES: %s\n", ft_convert_base("@@@@AFDEpisc22",
		"0123456789ABCDEF", "0123456789"));
	printf("RES: %s\n", ft_convert_base("----45022_X22",
		"0123456789", "0123456789ABCDEF"));
	printf("RES: %s\n", ft_convert_base(" --42edfrc", 
		"0123456789", "poneyvif"));
	printf("RES: %s\n", ft_convert_base(" -- vn  OH MY GOD^^", 
		"poneyvif", "0123456789"));






[🟢] Basic examples
	- "2" "hello" "world" " "
		-> "hello world"
	- "2" "toi" "moi" " + "
		-> "toi + moi"
	- "3" "visit: www" "42" "fr" "."
		-> "visit: www.42.fr"
	- "4" "" "mnt" "nfs" "homes" "/" 
		-> "/mnt/nfs/homes"

[🟢] Empty strings
	- "2" "" "" "\-#?"
		-> "\-#?"
	- "5" "" "" "" "" "" "\-#?"
		-> "\-#?\-#?\-#?\-#?"
	- "2" "" "" "	"
		-> "	"
		
[🟢] There is ONLY one string - Why using join then?
	- "1" "" ""
		-> ""
	- "1" "Je..." ""
		-> "Je..."
	- "1" "EXPLOSION" "\!"
		-> "EXPLOSION"

[🟢] "Wow, wow, wow... Joining a lot there."
	- "8" "yoursite.com" "api" "json" "v5" "get" "ressource" "id" "110" "/" 
		-> "yoursite.com/api/json/v5/get/ressource/id/110"
	- "16" 0 1 2 3 4 5 6 7 8 9 A B C D E F "-"
		-> "0-1-2-3-4-5-6-7-8-9-A-B-C-D-E-F"
	
[🟢] Empty or no separator
	- "3" "salut" "la" "mif" ""
		-> "salutlamif"
	- "2" "" "" ""
		-> ""
	- "4" "" "A" "" "B" ""
		-> "AB"
	- "8" "" "X" "" "Y" "" "" "" "Z" ""
		-> "XYZ"
	
[🟢] Too much separator
	- "2" "You" "Me" "		<------>		"
		-> 'You               <------>                Me'
	- "2" "FRA" "ALL" "		XXXXXXXXXXXXXXXXXXXXXXXXXXXX		"
		-> 'FRA               XXXXXXXXXXXXXXXXXXXXXXXXXXXX            ALL'
		
[🟢] No size
	- "0" "hello" "world" " "
		-> ""
	- "0" "" "" "\-#?"
		-> ""
	- "0" "EXPLOSION" "\!"
		-> ""

[🟢] Wrong size but enough strs (🌶️ hot case)
	- "1" "" "" "	"
		-> ""
	- "1" "hello" "world" " "
		-> "hello"
	- "1" "C'EST" " OUF \!\!" "..."
		-> "C'EST"
	- "-4" "Ich" "bin" "ein" "berliner" " "
		-> ""
		-> guard in main level blocks that kind of cases but "" is correct
		-> at source level, 0 < -3, so exception size == 0 is triggered. 
		At main level, strs = nil, so main prints this state.

[🟢] Wrong size but NOT enough strs (🌶️ hot case)
	- "5" "salut" "la" "mif" ""
		-> "salutlamif"
		-> Guards have been added to avoid relying only on size. Should have let
		the function do it's thing and return a segfault.
	- "10" "" "OUF"
		-> ""
		-> Only one str. What do you want to concatenate?
	- "20" "" "///"
		-> "" 
 	- "42" "welcome" "cadet" "_"
		-> "welcome_cadet"